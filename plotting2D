#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 12:19:56 2019

@author: jescab01
"""
import networkx as nx
from networkx.drawing.nx_agraph import graphviz_layout
import matplotlib.pyplot as plt


#G = nx.read_graphml("elegansNet/data/elegans.herm_connectome.graphml")
pos = graphviz_layout(G, prog='sfdp', args='')

### Determine node size by node degree
node_sizes = [0] * G.number_of_nodes()
i = 0
for n,nbrs in G.adjacency_iter():
    node_sizes[i] = G.degree(n) * 5
    i += 1


### Loop for plotting each timestep
    
for a in range(simulation_no):
    for b in range(timesteps):
        color=[]
        for c in range(302):
            color.append(activitydata[a][b]['n'+str(c)])
            
        plt.figure(figsize=(7,7))
        nx.draw(G, pos, node_color = color, node_size=node_sizes, width=1, style='dotted', arrows=False, cmap=plt.cm.Blues)


        font = {'fontname'   : 'DejaVu Sans',
	            'color'      : 'k',
	            'fontweight' : 'bold',
	            'fontsize'   : 11}

        plt.title("C.Elegans Neural Activity", font)

	    # change font and write text (using data coordinates)
        font = {'fontname'   : 'Helvetica',
	    'color'      : 'r',
	    'fontweight' : 'bold',
	    'fontsize'   : 11}

	    #type of activation
        plt.text(0.97, 0.97, "Initial node activation method = Random",
	             horizontalalignment='right',
	             transform=plt.gca().transAxes)
        
#'''
#		#activation period to refractory period ratio
#		plt.text(0.97, 0.94,  "AR = " + str(10.0/refractory),
#	             horizontalalignment='right',
#	             transform=plt.gca().transAxes)
#'''
#	    
        #percentage of initial activation
#        plt.text(0.97, 0.94,  "Percentage of node activated at t0 = " + "{0:.2f}".format(initActivity), 
#	             horizontalalignment='right',
#	             transform=plt.gca().transAxes)

	    #iteration
        plt.text(0.97, 0.91,  "Simulation number = " + str(a),
	             horizontalalignment='right',
	             transform=plt.gca().transAxes)
	    #time
        plt.text(0.97, 0.88,  "t = " + str(b),
	             horizontalalignment='right',
	             transform=plt.gca().transAxes)

        plt.savefig("imgChem/" + str(refractory) + "_" + str(a) + "step_n1_"  + str(b) + ".jpg")
        plt.close()

