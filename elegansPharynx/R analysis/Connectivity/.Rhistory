axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn),size=7) +
geom_point(alpha=0.5)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.5, size=c(1,13))+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.5, size=1)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.5, size=5)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.5, size=3)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.5, size=2)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.7, size=2)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn, size=Syn)) +
geom_point(alpha=0.7, size=2)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn, size=Syn)) +
geom_point(alpha=0.7, size=2)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn, size=Syn)) +
geom_point(alpha=0.7)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.7)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.7,size=2)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Plotting ----------
## Create structural adjacency matrix showing communities
ggplot(edges, aes(x = from, y = to, group=Syn, color=group, shape=Syn, size=lWxSGN)) +
geom_point(alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
ggtitle('Structural connectivity matrix (communities) - Pharynx')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
setwd("~/elegansProject/elegansPharynx/R analysis/Connectivity")
library(igraph)
library(dplyr)
library(ggplot2)
library(expss)
######### Prepare Structural connectivity matrices ---------------
# First, prepare network attributes with the entire connectome
original_edgelist <- read.csv("2.1hermPharynx_connections.csv", stringsAsFactors = FALSE)
original_nodelist <- read.csv("1.2cell_typesPharynx.csv", stringsAsFactors = FALSE)
# Create iGraph object
graph <- graph.data.frame(original_edgelist, directed = TRUE, vertices = original_nodelist)
rm (original_edgelist, original_nodelist)
# Calculate network properties
V(graph)$degree <- degree(graph)
V(graph)$closeness <- centralization.closeness(graph)$res
V(graph)$betweenness <- centralization.betweenness(graph)$res
V(graph)$eigen <- centralization.evcent(graph)$vector
# Generate dataframe for nodes ordered by group w\ properties
nodes=get.data.frame(graph, what='vertices')
nodes_ordered = nodes[order(nodes$group),]   ## groups based on cell type as in: elegansPharynx/simulator/data/networksetup/cell_typesPharynx.csv
all_nodes = nodes_ordered$name
rm (nodes_ordered)
# Determine group for each edge. If two nodes belong to the same cell type group,
# label the edge with that group. If not, the edge group value is 'NA'.
edges = get.data.frame(graph, what = "edges") %>%
inner_join(nodes %>% select(name, group), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, group), by = c("to" = "name")) %>%
mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edges = edges %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
# Generate variable with inh/exc structural weights
edges$WxSGN=edges$Weight*edges$exin
edges$lWxSGN=edges$logWeight*edges$exin
edges$Weight=NULL
edges$logWeight=NULL
######## Prepare Functional connectivity matrices -----
fConn <- read.csv("fConn.csv", stringsAsFactors = FALSE)
# Create iGraph for functional connectivity data
fGraph = graph.data.frame(fConn, directed = TRUE, vertices = nodes)
# Determine a group for each edge. If two nodes belong to the same group,
# label the edge with that group. If not, the edge group value is 'NA'.
edgesF = get.data.frame(fGraph, what = "edges") %>%
inner_join(nodes %>% select(name, group), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, group), by = c("to" = "name")) %>%
mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
edgesF$group.x=NULL
edgesF$group.y=NULL
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edgesF = edgesF %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
######### Preparing merged dataframe -----
# First, remove unuseful variables from edgesF and create new SFdf
SFdf=edgesF
# Add structural weights ordered by connection.
# Optimization: vectorialization, preallocation and use which()
SFdf$strucWChem=integer(nrow(SFdf))
SFdf$strucWElec=integer(nrow(SFdf))
for (n in 1:length(all_nodes)){
rlSFdf=which(SFdf$from==all_nodes[n])
rledges=which(edges$from==all_nodes[n])
print(n)
for (connc in rledges){
print(connc)
for (connf in rlSFdf){
if (SFdf$to[connf]==edges$to[connc] & edges$Syn[connc]=='chemical'){
SFdf$strucWChem[connf]=edges$WxSGN[connc]}
if (SFdf$to[connf]==edges$to[connc] & edges$Syn[connc]=='electrical'){
SFdf$strucWElec[connf]=edges$WxSGN[connc]}
}
}
}
rm(connc,connf,n,rledges,rlSFdf)
## Sum up electrical and chemical structural weights.
## Functional weights does not differentiate among them.
SFdf$sumEC=SFdf$strucWChem+SFdf$strucWElec
SFdf$logsumEC=1+log(SFdf$sumEC)
SFdf$logsumEC[SFdf$logsumEC==-Inf]=0
# clear used variables
SFdf$strucWElec=NULL
SFdf$strucWChem=NULL
##### Analyzing categorical existence of connection between neurons. ----
## Categorical variable for structural connections
SFdf$catE[SFdf$sumEC>0]=1
SFdf$catE[SFdf$logsumEC==0]=0
SFdf$catE[SFdf$logsumEC<0]=-1
## labels to variables
SFdf=apply_labels(SFdf, connPsi1='Functional connections w/o FDR',
connPsi1=c('Positive\ncorrelation'=1,'Negative\ncorrelation'=-1, 'Null'=0),
connPsi2='Functional connections w/ FDR',
connPsi2=c('Positive\ncorrelation'=1,'Negative\ncorrelation'=-1, 'Null'=0),
catE='Structural connections',
catE=c('Excitatory'=1,'Inhibitory'=-1, 'Non-Existent'=0))
####### with Psi1
cro(SFdf$connPsi1, list(SFdf$catE,total()))
addmargins(prop.table(table(SFdf$connPsi1, SFdf$catE), margin=2))
##Sensitivity and specificity just for excitatory connections as Pharynx doesnt have inhibitory.
# Sensitivity of GC to predict structural excitatory connections
#(i.e. rate of true positives: TP/TP+FN)
SensitivityPsi1=sum(SFdf$connPsi1[SFdf$connPsi1==1&SFdf$catE==1])/sum(SFdf$catE[SFdf$catE==1])
SensitivityPsi1
# Specificity of GC to predict absent structural connecitons
#(i.e. rate of true negatives: TN/TN+FP)
SpecificityPsi1=abs(length(SFdf$catE[SFdf$connPsi1<=0&SFdf$catE<=0]))/length(SFdf$catE[SFdf$catE<=0])
SpecificityPsi1
chisq.test(SFdf$connPsi1, SFdf$catE)
fisher.test(SFdf$connPsi1, SFdf$catE)
ggplot(SFdf, aes(as.factor(catE), fill=as.factor(connPsi1)))+
geom_bar(width = 0.8)+
scale_fill_hue(direction = -1, h.start=90)+
xlab('Structural')+
labs(fill="Functional")+
ggtitle('Categorical connections w/o FDR - Pharynx')
ggplot(SFdf, aes(as.factor(catE), fill=as.factor(connPsi1)))+
geom_bar(width = 0.8)+
scale_fill_hue(direction = -1, h.start=90)+
xlab('Structural')+
labs(fill="Functional")+
ggtitle('Categorical predictions w/o FDR - Pharynx')
####### with Psi2
cro(SFdf$connPsi2, list(SFdf$catE,total()))
addmargins(prop.table(table(SFdf$connPsi2, SFdf$catE)))
##Sensitivity and specificity just for excitatory connections as Pharynx doesnt have inhibitory.
# Sensitivity of GC to predict structural excitatory connections
#(i.e. rate of true positives: TP/TP+FN)
SensitivityPsi1=sum(SFdf$connPsi2[SFdf$connPsi2==1&SFdf$catE==1])/sum(SFdf$catE[SFdf$catE==1])
SensitivityPsi1
# Specificity of GC to predict absent structural connecitons
#(i.e. rate of true negatives: TN/TN+FP)
SpecificityPsi1=abs(length(SFdf$catE[SFdf$connPsi2<=0&SFdf$catE<=0]))/length(SFdf$catE[SFdf$catE<=0])
SpecificityPsi1
chisq.test(SFdf$connPsi2,SFdf$catE)
ggplot(SFdf, aes(as.factor(catE), fill=as.factor(connPsi2)))+
geom_bar(width = 0.8)+
scale_fill_hue(direction = -1, h.start=90)+
xlab('Structural')+
labs(fill="Functional")+
ggtitle('Categorical predictions w/ FDR - Pharynx')
### Use the best Psi predictor to eliminate non significant functional connectivity weights
SFdf$connPhiPsi=SFdf$connPhi
SFdf$connPhiPsi[SFdf$connPsi2==0]=0
### Analyzing weight correlations between functional and structural networks ----
cor.test(SFdf$connPhiPsi, SFdf$logsumEC, method=c("pearson"))
# Plot correlation
ggplot(SFdf, aes(logsumEC, connPhiPsi))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)+
xlab('Structural Weight')+
ylab('Functional Weight')+
ggtitle('Weight correlation - Pharynx')
### Control for functional self connectivity.
# Strong anticorrelation due to Absolute refractory period.
SFdf$PhiPsiNself=SFdf$connPhiPsi
SFdf$PhiPsiNself[SFdf$from==SFdf$to]=0
# correlation w/o self functional connectivity
cor.test(SFdf$PhiPsiNself, SFdf$logsumEC, method=c("pearson"))
# Plot correlation (non self connections)
ggplot(SFdf, aes(logsumEC, PhiPsiNself))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)+
xlab('Structural Weight')+
ylab('Functional Weight')+
ggtitle('Weight correlation w/o self conn. - Pharynx')
#### Plotting ----------
## Create structural adjacency matrix showing communities and weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=group, shape=Syn, size=lWxSGN)) +
geom_point(alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
ggtitle('Structural connectivity matrix - Pharynx')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Functiona matrix w/ weighted connectivity
ggplot(SFdf, aes(x = from, y = to, color=connPhiPsi)) +
geom_point(shape=15, size=6) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
ggtitle('Functional connectivity matrix - Pharynx')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Functional matrix w/o sefl connections
ggplot(SFdf, aes(x = from, y = to, color=PhiPsiNself)) +
geom_point(shape=15, size=6) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
ggtitle('Functional connectivity matrix w/o self conn. - Pharynx')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
#########  Structural and functional matrices -----
ggplot() +
geom_point(data = SFdf, aes(x=from, y=to, colour=connPhiPsi), shape=15, size=5, alpha=0.8)+
geom_point(data = edges, aes(x = from, y = to, group=Syn, size=lWxSGN, shape=Syn), alpha=0.2)+
theme_light() +
scale_colour_gradient2(low = 'lightcyan2', high = 'darkorange1')+
ggtitle('Structural & Functional connectivity matrix - Pharynx')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and functional no-self
ggplot() +
geom_point(data = SFdf, aes(x=from, y=to, colour=PhiPsiNself), shape=15, size=5, alpha=0.8)+
geom_point(data = edges, aes(x = from, y = to, group=Syn, size=lWxSGN, shape=Syn), alpha=0.2)+
theme_light() +
scale_colour_gradient2(low = 'lightcyan2', high = 'darkorange1')+
ggtitle('Structural & Functional (w/o self conn.) connectivity matrix - Pharynx')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and functional no-self
ggplot() +
geom_point(data = SFdf, aes(x=from, y=to, colour=PhiPsiNself), shape=15, size=5, alpha=0.8)+
geom_point(data = edges, aes(x = from, y = to, group=Syn, size=lWxSGN, shape=Syn), alpha=0.2)+
theme_light() +
scale_colour_gradient2(low = 'lightcyan2', high = 'darkorange1')+
ggtitle('Structural & Functional (w/o self conn.) matrix - Pharynx')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
