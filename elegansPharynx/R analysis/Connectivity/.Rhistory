aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
######### Functional connectivity matrices -----
fConn <- read.csv("fConn1Jul.csv", stringsAsFactors = FALSE)
# Create iGraph for functional connectivity data
fGraph = graph.data.frame(fConn, directed = TRUE, vertices = nodes)
# Determine a community for each edge. If two nodes belong to the same community, label the edge with that community.
# If not, the edge community value is 'NA'
edgesF = get.data.frame(fGraph, what = "edges") %>%
inner_join(nodes %>% select(name, community), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, community), by = c("to" = "name")) %>%
mutate(group = ifelse(community.x == community.y, community.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edgesF = edgesF %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
# prepare functional connectivity (just positive) for later
edgesF$connWeightP=pmax(0,edgesF$connWeight)
edgesF$connWxGCP=pmax(0,edgesF$connWxGC)
## Create functional adjacency matrix showing weighted connectivity
ggplot(edgesF, aes(x = from, y = to, color=connWeight)) +
geom_point(shape=15, size=6) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing wighted x GC connectivity
ggplot(edgesF, aes(x = from, y = to, color=connWxGC)) +
geom_point(shape=15, size=6) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing Weight Positive connectivity
ggplot(edgesF, aes(x = from, y = to, color='chocolate1')) +
geom_point(shape=15, size=edgesF$connWeightP/3) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
#scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing Weight x GC Positive connectivity
ggplot(edgesF, aes(x = from, y = to, color='chocolate1')) +
geom_point(shape=15, size=edgesF$connWxGCP/3) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
#scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=7) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and weighted x GC
ggplot() +
geom_point(data = edgesF, aes(x=from,y=to, color=connWxGC), shape=15, size=7) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate1")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
#####  Plot structural and functional (just excitatory) together
## Structure and weightP
ggplot() +
geom_point(data = edgesF, aes(x=from,y=to,color=connWeightP),shape=15,size=7) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18, size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient(low = 'white', high ='chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and weight x GC
ggplot() +
geom_point(data = edgesF, aes(x=from,y=to,color=connWxGCP), shape=15, size=7) +
geom_point(data = edgesChem, aes(x=from, y=to),shape=18, size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=0.7, color=edgesElec$logWeight, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient(low = 'white', high ='chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
######### Correlation between Structural and functional weights -----
SFdf=edgesF
SFdf$connPhi=NULL
SFdf$connPsi1=NULL
SFdf$connPsi2=NULL
SFdf$community.x=NULL
SFdf$community.y=NULL
SFdf$group=NULL
SFdf$strucW=NA
SFdf$strucLogW=NA
SFdf$strucWe=NA
SFdf$strucLogWe=NA
for (connf in 1:length(SFdf$from)){
for (connc in 1:length(edgesChem$from)){
if (SFdf[connf,]['from']==edgesChem[connc,]['from'] & SFdf[connf,]['to']==edgesChem[connc,]['to']){
SFdf$strucLogW[connf]=edgesChem$logWeight[connc]
SFdf$strucW[connf]=edgesChem$Weight[connc]
}
}
for (conne in 1:length(edgesElec$from)){
if (SFdf[connf,]['from']==edgesElec[conne,]['from'] & SFdf[connf,]['to']==edgesElec[conne,]['to']){
SFdf$strucLogWe[connf]=edgesElec$logWeight[conne]
SFdf$strucWe[connf]=edgesElec$Weight[conne]
}
}
}
## sum up the electrical and chemical connections because the functional weight does not differentiate among them
SFdf[is.na(SFdf)] = 0
SFdf$sumEC=SFdf$strucW+SFdf$strucWe
SFdf$logsumEC=1+log(SFdf$sumEC)
SFdf$logsumEC[SFdf$logsumEC==-Inf]=0
### Plot and lets see..
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point()
### how are they correlating
cor.test(SFdf$connWeight, SFdf$logsumEC, method=c("pearson", "kendall", "spearman"))
View(SFdf)
SFdf$catF=SFdf$connWxGC[SFdf$connWxGC>0]=1
SFdf$catF=SFdf$connWxGC[SFdf$connWxGC<0]=-1
SFdf$catF=SFdf$connWxGC[SFdf$connWxGC=0]=0
SFdf$catF=SFdf$connWxGC[SFdf$connWxGC==0]=0
SFdf$connWxGC[1]
for (i in 1:length(SFdf$from)){
if (SFdf$connWxGC[i]==0){
SFdf$catF=0
}
if (SFdf$connWxGC[i]<0){
SFdf$catF=-1
}
if (SFdf$connWxGC[i]>0){
SFdf$catF=1
}
}
for (i in 1:length(SFdf$from)){
if (SFdf$sumEC[i]==0){
Sfdf$catE=0
}
if (SFdf$sumEC[i]<0){
Sfdf$catE=-1
}
if (SFdf$sumEC[i]>0){
Sfdf$catE=1
}
}
View(SFdf)
for (i in 1:length(SFdf$from)){
if (SFdf$sumEC[i]==0){
SFdf$catE=0
}
if (SFdf$sumEC[i]<0){
SFdf$catE=-1
}
if (SFdf$sumEC[i]>0){
SFdf$catE=1
}
}
SFdf$sumEC[12]<0
SFdf$sumEC[12]==0
SFdf$sumEC[12]<0
SFdf$sumEC[12]>0
SFdf$sumEC[4]>0
SFdf$catE[SFdf$logsumEC>0]=1
SFdf$catE[SFdf$logsumEC>0]=1
SFdf$catE[SFdf$logsumEC==0]=0
SFdf$catE[SFdf$logsumEC<0]=-1
SFdf$catF[SFdf$connWxGC>0]=1
SFdf$catF[SFdf$connWxGC==0]=0
SFdf$catF[SFdf$connWxGC<0]=-1
## plot categorical
table(SFdf$catF,SFdf$catE)
chisq.test(SFdf$catF,SFdf$catE)
fisher.test(SFdf$catF,SFdf$catE)
ggplots(SFdf, aes(SFdf$catF,SFdf$catE))+
geom_bar()
ggplot(SFdf, aes(SFdf$catF,SFdf$catE))+
geom_bar()
ggplot(SFdf, aes(SFdf$catF))+
geom_bar()
ggplot(SFdf, aes(SFdf$catF))+
geom_bar()+
geom_bar(SFdf$catE)
ggplot()+
geom_bar(SFdf$catE)+
geom_bar(SFdf$catE)
ggplot()+
geom_histogram(SFdf$catE)+
geom_bar(SFdf$catE)
ggplot()+
geom_histogram(SFdf$catE)+
geom_histogram(SFdf$catE)
geom_histogram()
ggplot(SFdf, aes(catE, catF))+
geom_histogram()
ggplot(SFdf, aes(catE))+
geom_histogram()
ggplot(SFdf, aes(catE, group=catF))+
geom_bar()
ggplot(SFdf, aes(catE, color=catF))+
geom_bar()
ggplot(SFdf, aes(catE, color=catF))+
geom_histogram()
ggplot(SFdf, aes(catE, fill=catF))+
geom_bar()
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar()
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar(width = 0.5)
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar(width = 0.3)
prop.table(table(SFdf$catF,SFdf$catE)))
prop.table(table(SFdf$catF,SFdf$catE))
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = catF), position = "dodge")
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = as.factor(catF)), position = "dodge")
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar(width = 0.3)
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar()
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point()
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point()+
geom_smooth()
prop.table(table(SFdf$catF,SFdf$catE))
SFdf$catF[SFdf$connWxGC==0]=-1
## Examining categorical existance of connection in Structural connectome or functional one.
table(SFdf$catF,SFdf$catE)
prop.table(table(SFdf$catF,SFdf$catE))
chisq.test(SFdf$catF,SFdf$catE)
fisher.test(SFdf$catF,SFdf$catE)
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar()
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = as.factor(catF)), position = "dodge")
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = as.factor(catF)), position = "dodge", size=0.6)
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = as.factor(catF)), position = "dodge", size=0.1)
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = as.factor(catF), size=0.5), position = "dodge", size=0.1)
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point()+
geom_smooth()
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point()
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point(size=0.5)
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point(size=0.5)+
geom_smooth(family='lm')
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point(size=0.5)
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(connWeight, catE))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC) color=catE)+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), color=catE)+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), color=as.factor(catE))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), color=as.factor(catF))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), group=as.factor(catF))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), group=as.factor(catF))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), color=as.factor(catF),group=as.factor(catF))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC), color=as.factor(catF),group=as.factor(catF))+
geom_point(color=as.factor(catF))
ggplot(SFdf, aes(connWeight, logsumEC), color=as.factor(catF),group=as.factor(catF))+
geom_point(color=as.factor(SFdf$catF))
ggplot(SFdf, aes(connWeight, logsumEC), color=as.factor(catF),group=as.factor(catF))+
geom_point(group=as.factor(SFdf$catF))
ggplot(SFdf, aes(connWeight, logsumEC,group=as.factor(catF)),group=as.factor(catF))+
geom_point(group=as.factor(SFdf$catF))
ggplot(SFdf, aes(connWeight, logsumEC,group=as.factor(catF))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC,group=as.factor(catF))+
ggplot(SFdf, aes(connWeight, logsumEC,group=as.factor(catF)))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC, colour=as.factor(catF)))+
geom_point()
ggplot(SFdf, aes(connWeight, logsumEC, colour=as.factor(catE)))+
geom_point()
SFdf$catB[SFdf$connWxGC<0 & SFdf$logsumEC<0]=-1
SFdf$catB[SFdf$connWxGC>0 & SFdf$logsumEC>0]=1
ggplot(SFdf, aes(connWeight, logsumEC, colour=as.factor(catB)))+
geom_point()
SFdf$catB[SFdf$connWxGC<0 & SFdf$logsumEC=<0]=-1
SFdf$catB[SFdf$connWxGC<0 & SFdf$logsumEC<=0]=-1
SFdf$catB[SFdf$connWxGC>0 & SFdf$logsumEC>0]=1
ggplot(SFdf, aes(connWeight, logsumEC, colour=as.factor(catB)))+
geom_point()
ggplot(SFdf, aes(logsumEC,connWeight colour=as.factor(catB)))+
geom_point()
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point()
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(catB))+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB))+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
SFdf$catB[is.na(SFdf$catB)]=0
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(catB))+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB))+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+1))+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+2))+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+2))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, group=as.factor(SFdf$catB+2))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+2))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+6))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+9))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+4))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+3))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB*2))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+3))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+3))+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+3))+
geom_smooth(method='lm',formula=y~x, size=0.5)
### plotting weight correlation
ggplot(SFdf[SFdf$catB==1], aes(logsumEC,connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm', formula=y~x, size =0.5)
### plotting weight correlation
ggplot(SFdf[SFdf$catB==1,], aes(logsumEC,connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm', formula=y~x, size =0.5)
### plotting weight correlation
ggplot(SFdf[SFdf$catB==1,], aes(logsumEC,connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm', formula=y~x)
### Plot correlation between structural and functional weights
ggplot(SFdf, aes(logsumEC, connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x)
ggplot(SFdf, aes(logsumEC,connWeight, colour=as.factor(catB)))+
geom_point(size=0.5)
ggplot(SFdf, aes(logsumEC,connWeight))+
geom_point(size=0.5, colour=as.factor(SFdf$catB+3))+
geom_smooth(method='lm',formula=y~x, size=0.5)
### plotting weight correlation
ggplot(SFdf[SFdf$catB==1,], aes(logsumEC,connWeight))+
geom_point(size=0.5)+
geom_smooth(method='lm', formula=y~x)
## Examining categorical existance of connection in Structural connectome or functional one.
table(SFdf$catF,SFdf$catE)
prop.table(table(SFdf$catF,SFdf$catE))
chisq.test(SFdf$catF,SFdf$catE)
fisher.test(SFdf$catF,SFdf$catE)
ggplot(SFdf, aes(catE, fill=as.factor(catF)))+
geom_bar()
ggplot(SFdf, aes(catE, ..count..)) +
geom_bar(aes(fill = as.factor(catF)), position = "dodge")
colSums(table(SFdf$catF,SFdf$catE))
rowSums(table(SFdf$catF,SFdf$catE))
## Examining categorical existance of connection in Structural connectome or functional one.
table(SFdf$catF,SFdf$catE)
colSums(table(SFdf$catF,SFdf$catE))
rowSums(table(SFdf$catF,SFdf$catE))
colSums(prop.table(table(SFdf$catF,SFdf$catE)))
rowSums(prop.table(table(SFdf$catF,SFdf$catE)))
