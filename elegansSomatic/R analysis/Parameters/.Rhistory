mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edgesChem = edgesChem %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
edgesElec = edgesElec %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=5) +
geom_point(data = edgesElec, aes(x=from, y=to), size=2, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
edgesElec$logWeight
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights*inh/exc
ggplot(edgesChem, aes(x = from, y = to, color=logWeight)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='grey17', alpha=0.4)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient(low = 'lightgoldenrod2', high = 'orangered')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
## Create structural adjacency matrix showing weights*inh/exc
ggplot(edgesChem, aes(x = from, y = to, color=logWeight)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='grey17', alpha=0.4)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient(low = 'lightgoldenrod2', high = 'orangered')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights*inh/exc
ggplot(edgesChem, aes(x = from, y = to, color=logWeight)) +
geom_point(shape=18, size=edgesChem$logWeight/2) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight/2, color='grey17', alpha=0.4)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient(low = 'lightgoldenrod2', high = 'orangered')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight/2) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight/2, alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
library(igraph)
library(dplyr)
library(ggplot2)
setwd("~/elegansProject/elegansPharynx/R analysis/Connectivity")
######### Structural connectivity matrices ---------------
# First, prepare network attributes with the entire connectome
original_edgelist <- read.csv("hermPharynx_connections.csv", stringsAsFactors = FALSE)
original_nodelist <- read.csv("1.2cell_typesPharynx.csv", stringsAsFactors = FALSE)
# Create iGraph object and calculate network properties
graph <- graph.data.frame(original_edgelist, directed = TRUE, vertices = original_nodelist)
V(graph)$degree <- degree(graph)
V(graph)$closeness <- centralization.closeness(graph)$res
V(graph)$betweenness <- centralization.betweenness(graph)$res
V(graph)$eigen <- centralization.evcent(graph)$vector
rm (original_edgelist, original_nodelist)
# Generate an undirected graph to calculate communities (add the most appropriate calculation
# to node as attribute (i.e. V(graph)$community=cfg$membership))
netSimply=as.undirected(graph, mode='collapse',edge.attr.comb=list(weight='sum','ignore'))
# Based on Edge betweeness (Newman-Girvan)
ceb=cluster_edge_betweenness(netSimply)
dendPlot(ceb, mode = 'hclust')
plot(ceb,netSimply)
# Based on propagating labels
clp=cluster_label_prop(netSimply)
plot(clp, netSimply)
# Based on greedy optimization of modularity
cfg=cluster_fast_greedy(netSimply)
plot(cfg, netSimply)
V(netSimply)$community=cfg$membership
colrs <- adjustcolor( c("gray50", "tomato", "gold", "yellowgreen"), alpha=.6)
plot(netSimply, vertex.color=colrs[V(netSimply)$community])
# K-core decomposition
kc=coreness(netSimply,mode='all')
plot(netSimply,vertex.size=kc*6, vertex.label=kc)
# Choose and add the most appropriate community calculation as attribute. i.e.:
V(graph)$community=cfg$membership
rm(ceb,clp,cfg,colrs,kc, netSimply)
# Generate dataframe for nodes with updated network attributes, and ordered by community
nodes=get.data.frame(graph, what='vertices')
#nodes_ordered = nodes[order(nodes$community),]
nodes_ordered = nodes[order(nodes$group),]
all_nodes = nodes_ordered$name
rm (nodes_ordered)
# Prepare plotting with separate graphs for electrical and chemical connections
chemConn = read.csv("hermPharynx_connectionsCHEM.csv", stringsAsFactors = FALSE)
elecConn = read.csv("hermPharynx_connectionsELEC.csv", stringsAsFactors = FALSE)
# Create one iGraph per network
chemGraph = graph.data.frame(chemConn, directed = TRUE, vertices = nodes)
elecGraph = graph.data.frame(elecConn, directed = T, vertices = nodes)
rm(chemConn,elecConn)
# Determine a group for each edge. If two nodes belong to the same cell type group, label the edge with that group.
# If not, the edge group value is 'NA'
edgesChem = get.data.frame(chemGraph, what = "edges") %>%
inner_join(nodes %>% select(name, group), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, group), by = c("to" = "name")) %>%
mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
edgesElec = get.data.frame(elecGraph, what = "edges") %>%
inner_join(nodes %>% select(name, group), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, group), by = c("to" = "name")) %>%
mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edgesChem = edgesChem %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
edgesElec = edgesElec %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
## Create structural adjacency matrix showing communities
ggplot(edgesChem, aes(x = from, y = to, color=group)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
## Create structural adjacency matrix showing weights*inh/exc
ggplot(edgesChem, aes(x = from, y = to, color=logWeight)) +
geom_point(shape=18, size=edgesChem$logWeight) +
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='grey17', alpha=0.4)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient(low = 'lightgoldenrod2', high = 'orangered')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Hide the legend (optional)
legend.position = "none")
fConn <- read.csv("fConn1sim.csv", stringsAsFactors = FALSE)
# Create iGraph for functional connectivity data
fGraph = graph.data.frame(fConn, directed = TRUE, vertices = nodes)
# Determine a community for each edge. If two nodes belong to the same community, label the edge with that community.
# If not, the edge community value is 'NA'
edgesF = get.data.frame(fGraph, what = "edges") %>%
inner_join(nodes %>% select(name, community), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, community), by = c("to" = "name")) %>%
mutate(group = ifelse(community.x == community.y, community.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edgesF = edgesF %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
# prepare functional connectivity (just positive) for later
edgesF$connWeightP=pmax(0,edgesF$connWeight)
edgesF$connWxGCP=pmax(0,edgesF$connWxGC)
## Create functional adjacency matrix showing weighted connectivity
ggplot(edgesF, aes(x = from, y = to, color=connWeight)) +
geom_point(shape=15, size=6) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing wighted x GC connectivity
ggplot(edgesF, aes(x = from, y = to, color=connWxGC)) +
geom_point(shape=15, size=6) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing Weight Positive connectivity
ggplot(edgesF, aes(x = from, y = to, color='chocolate1')) +
geom_point(shape=15, size=edgesF$connWeightP/3) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
#scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing Weight x GC Positive connectivity
ggplot(edgesF, aes(x = from, y = to, color='chocolate1')) +
geom_point(shape=15, size=edgesF$connWxGCP/3) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
#scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=7) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=connWeight) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=connWeight) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=edgesF$connWeight) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
View(edgesF)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=edgesF$connWeight/10) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_point(data = edgesF, aes(x=from, y=to, color=connWeight), shape=15, size=7) +
geom_point(data = edgesChem, aes(x=from, y=to), shape=18,size=edgesChem$logWeight, color='darkred')+
geom_point(data = edgesElec, aes(x=from, y=to), size=edgesElec$logWeight, color='black', alpha=0.5)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
scale_color_gradient2(low = "lightcyan2", mid = "white", high = "chocolate4")+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
setwd("~/elegansProject/elegansPharynx/R analysis/Parameters")
library("dplyr", lib.loc="~/anaconda3/envs/rstudio/lib/R/library")
library("ggplot2", lib.loc="~/anaconda3/envs/rstudio/lib/R/library")
paramTest=read.csv('dataSomatic_Fri Jun 28 13:33:33 2019.csv')
setwd("~/elegansProject/elegansSomatic/R analysis/Parameters")
library("dplyr", lib.loc="~/anaconda3/envs/rstudio/lib/R/library")
library("ggplot2", lib.loc="~/anaconda3/envs/rstudio/lib/R/library")
paramTest=read.csv('dataSomatic_Fri Jun 28 13:33:33 2019.csv')
paramTest1=mutate(paramTest, surviveBinary = surviveTime, rrp2spike=inATT-rrp2rest, ocrrp2spike=rrp2spike/(rrp2spike+rrp2rest))
paramTest1$surviveBinary[paramTest1$surviveBinary!=50]=0
paramTest1$surviveBinary[paramTest1$surviveBinary==50]=1
modelsurv=glm(surviveBinary~RI+c+att, data = paramTest1, family = "binomial")
summary(modelsurv)
ggplot(paramTest1, aes(c, surviveBinary, group=as.factor(RI), colour=as.factor(RI))) +
geom_smooth(method = 'glm', method.args = list(family=binomial))+
xlab("Synaptic efficacy (c)")+
ylab("Persistance probability")+
labs(colour = "Initial\nactivity\n(RI)")
#### Working on minimum activity node
# filtered=filter(paramTest1, c==0.5, RI==0.4| RI==0.3|RI==0.5)
# sampled=sample_n(paramTest1, 1000)
ggplot(paramTest1, aes(c, minNodeActivity, group=as.factor(RI), colour=as.factor(RI))) +
geom_jitter()+
xlab("Synaptic efficacy (c)")+
ylab("minNodeActivity")+
labs(colour = "Initial\nactivity\n(RI)")
View(paramTest1)
paramTest=read.csv('dataSomatic_Fri Jun 28 14:10:18 2019.csv')
paramTest1=mutate(paramTest, surviveBinary = surviveTime, rrp2spike=inATT-rrp2rest, ocrrp2spike=rrp2spike/(rrp2spike+rrp2rest))
paramTest1$surviveBinary[paramTest1$surviveBinary!=50]=0
paramTest1$surviveBinary[paramTest1$surviveBinary==50]=1
modelsurv=glm(surviveBinary~RI+c+att, data = paramTest1, family = "binomial")
summary(modelsurv)
ggplot(paramTest1, aes(c, surviveBinary, group=as.factor(RI), colour=as.factor(RI))) +
geom_smooth(method = 'glm', method.args = list(family=binomial))+
xlab("Synaptic efficacy (c)")+
ylab("Persistance probability")+
labs(colour = "Initial\nactivity\n(RI)")
#### Working on minimum activity node
# filtered=filter(paramTest1, c==0.5, RI==0.4| RI==0.3|RI==0.5)
# sampled=sample_n(paramTest1, 1000)
ggplot(paramTest1, aes(c, minNodeActivity, group=as.factor(RI), colour=as.factor(RI))) +
geom_jitter()+
xlab("Synaptic efficacy (c)")+
ylab("minNodeActivity")+
labs(colour = "Initial\nactivity\n(RI)")
