axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Create functional adjacency matrix showing Weight x GC Positive connectivity
ggplot(edgesF, aes(x = from, y = to, color='chocolate1')) +
geom_point(shape=15, size=edgesF$connWxGCP/3) +
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
#scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Structure and Weighted functional
ggplot() +
geom_raster(data = edgesF, aes(x=from, y=to, fill=lWNPnoself))+
scale_fill_gradient2(low = 'white', high = 'yellowgreen')+
geom_point(data = edges, aes(x = from, y = to, group=Syn, color=logWxSGN, shape=Syn), size=2, alpha=0.4)+
scale_colour_gradient2(low = 'skyblue', high = 'orangered')+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Structure and Weighted functional
ggplot() +
geom_raster(data = edgesF, aes(x=from, y=to, fill=lWNPnoself))+
scale_fill_gradient2(low = 'mediumseagreen', high = 'khaki3')+
geom_point(data = edges, aes(x = from, y = to, group=Syn, color=logWxSGN, shape=Syn), size=2, alpha=0.4)+
scale_colour_gradient2(low = 'skyblue', high = 'orangered')+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Structure and Weighted functional
ggplot() +
geom_raster(data = edgesF, aes(x=from, y=to, fill=lWNPnoself))+
scale_fill_gradient2(low = 'midnightblue', high = 'darkred')+
geom_point(data = edges, aes(x = from, y = to, group=Syn, color=logWxSGN, shape=Syn), size=2, alpha=0.4)+
scale_colour_gradient2(low = 'skyblue', high = 'orangered')+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Structure and Weighted functional
ggplot() +
geom_raster(data = edgesF, aes(x=from, y=to, fill=lWNPnoself))+
scale_fill_gradient2(low = 'darkseagreen', high = 'gold2')+
geom_point(data = edges, aes(x = from, y = to, group=Syn, color=logWxSGN, shape=Syn), size=2, alpha=0.4)+
scale_colour_gradient2(low = 'skyblue', high = 'orangered')+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
SFdf=edgesF
SFdf$connPhi=NULL
SFdf$connPsi1=NULL
SFdf$connPsi2=NULL
SFdf$community.x=NULL
SFdf$community.y=NULL
SFdf$group=NULL
SFdf$strucW=NA
SFdf$strucLogW=NA
SFdf$strucWe=NA
SFdf$strucLogWe=NA
# Copy structural weights where
for (connf in 1:length(SFdf$from)){
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
View(SFdf)
######### Structural connectivity matrices ---------------
# First, prepare network attributes with the entire connectome
original_edgelist <- read.csv("2.1hermSomatic_connections.csv", stringsAsFactors = FALSE)
original_nodelist <- read.csv("1.2cell_typesSomatic.csv", stringsAsFactors = FALSE)
# create iGraph
graph <- graph.data.frame(original_edgelist, directed = TRUE, vertices = original_nodelist)
G
G
G
## cont. -----
# Generate dataframe for nodes with updated network attributes, and ordered by community
nodes=get.data.frame(graph, what='vertices')
#nodes_ordered = nodes[order(nodes$community),]
nodes_ordered = nodes[order(nodes$group),]
all_nodes = nodes_ordered$name
rm (nodes_ordered)
# Determine a group for each edge. If two nodes belong to the same cell type group, label the edge with that group.
# If not, the edge group value is 'NA'
edges = get.data.frame(graph, what = "edges") %>%
inner_join(nodes %>% select(name, group), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, group), by = c("to" = "name")) %>%
mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edges = edges %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
fConn <- read.csv("fConnWonly1Jul.csv", stringsAsFactors = FALSE)
# Create iGraph for functional connectivity data
fGraph = graph.data.frame(fConn, directed = TRUE, vertices = nodes)
# Determine a community for each edge. If two nodes belong to the same community, label the edge with that community.
# If not, the edge community value is 'NA'
edgesF = get.data.frame(fGraph, what = "edges") %>%
inner_join(nodes %>% select(name, group), by = c("from" = "name")) %>%
inner_join(nodes %>% select(name, group), by = c("to" = "name")) %>%
mutate(group = ifelse(group.x == group.y, group.x, NA) %>% factor())
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
edgesF = edgesF %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
## Create functional adjacency matrix showing weighted connectivity
# prepare functional connectivity (just positive) for later
edgesF$connWeightP=pmax(0,edgesF$connWeight)
edgesF$connWxGCP=pmax(0,edgesF$connWxGC)
# log for positive connectivity
edgesF$logConnWP=log(edgesF$connWeightP+1)
edgesF$connWeightN=pmin(0,edgesF$connWeight)
edgesF$connWxGCN=pmin(0,edgesF$connWxGC)
# log for positive connectivity
edgesF$logConnWN=-log(-edgesF$connWeightN+1)
edgesF$logWNP=edgesF$logConnWN
edgesF$logWNP[edgesF$logWNP==0]=edgesF$logConnWP[edgesF$logWNP==0]
##variable making 0 self-connections
edgesF$lWNPnoself=edgesF$logWNP
edgesF$lWNPnoself[edgesF$from==edgesF$to]=0
SFdf=edgesF
SFdf$connPhi=NULL
SFdf$connPsi1=NULL
SFdf$connPsi2=NULL
SFdf$community.x=NULL
SFdf$community.y=NULL
SFdf$group=NULL
SFdf$strucW=NA
SFdf$strucLogW=NA
SFdf$strucWe=NA
SFdf$strucLogWe=NA
# add structural weights ordered by connection [save it, lots of processing resources]
for (connf in 1:length(SFdf$from)){
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
print(connc)
# add structural weights ordered by connection [save it, lots of processing resources]
for (connf in 1:length(SFdf$from)){
for (connc in 1:length(edges$from)){
print(connc)
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
print(connf)
# add structural weights ordered by connection [save it, lots of processing resources]
for (connf in 1:length(SFdf$from)){
for (connc in 1:length(edges$from)){
print(connf)
print(connc)
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
print(connf)
# add structural weights ordered by connection [save it, lots of processing resources]
for (connf in 1:length(SFdf$from)){
for (connc in 1:length(edges$from)){
print(connf)
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
# add structural weights ordered by connection [save it, lots of processing resources]
for (connf in 1:length(SFdf$from)){
print(connf)
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connf in 1:length(SFdf$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
# add structural weights ordered by connection [save it, lots of processing resources]
for (connc in 1:length(edges$from)){
print(connc)
for (connf in 1:length(SFdf$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
View(SFdf)
SFdf$strucWe=double(nrow(SFdf))
SFdf$strucLogWe=double(nrow(SFdf))
SFdf$strucW=double(nrow(SFdf))
SFdf$strucLogW=double(nrow(SFdf))
SFdf=edgesF
SFdf$connPhi=NULL
SFdf$connPsi1=NULL
SFdf$connPsi2=NULL
SFdf$community.x=NULL
SFdf$community.y=NULL
SFdf$group=NULL
SFdf$strucW=NA
SFdf$strucLogW=NA
SFdf$strucWe=NA
SFdf$strucLogWe=NA
SFdf$strucW=double(nrow(SFdf))
SFdf$strucLogW=double(nrow(SFdf))
for (connf in 1:length(SFdf$from)){
print(connc)
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connf in 1:length(SFdf$from)){
print(connc)
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
View(nodes)
names=nodes$name
SFdf$strucLogW=double(nrow(SFdf))
for (connf in 1:length(SFdf$from)){
print(connc)
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
print(connf)
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
#Optimization: conditions outside the loop
condition = [connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']
#Optimization: conditions outside the loop
condition = ([connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to'])
#Optimization: conditions outside the loop
condition <- ([connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to'])
#Optimization: conditions outside the loop
condition1= SFdf[connf,]['from']==edges[connc,]['from']
condition2= SFdf[connf,]['to']==edges[connc,]['to']
condition2= (SFdf[connf,]['to']==edges[connc,]['to'])
#Optimization: conditions outside the loop
condition1= (SFdf[connf,]['from']==edges[connc,]['from'])
View(condition1)
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (condition1 & condition2){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (condition1 & condition2){
print('ok')
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (condition1 & condition2){
print('ok')
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (condition1 & condition2){
print('ok')
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (condition1 & condition2){
print('ok')
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
#Optimization: conditions outside the loop
condition1 = SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']
#Optimization: conditions outside the loop
condition = SFdf[connf,]['from']==edges[connc,]['from'] & SFdf[connf,]['to']==edges[connc,]['to']
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (condition){
print('ok')
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
#Optimization: conditions outside the loop
condition = SFdf$from==edges$from & SFdf$to==edges$to
condition
condition[T]
condition[condition=T]
condition[condition==T]
#Optimization: conditions outside the loop
condition = SFdf$from[connf]==edges$from[connc] & SFdf$to[connf]==edges$to[connc]
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
if (SFdf$from[connf]==edges$from[connc] & SFdf$to[connf]==edges$to[connc]){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
View(edges)
1,2==1,2
[1,2]==[1,2]
(1,2)==(1,2)
for (connf in 1:length(SFdf$from)){
print(connf)
print(connc)
for (connc in 1:length(edges$from)){
(SFdf$from[connf]==edges$from[connc] & SFdf$to[connf]==edges$to[connc])
}
}
edges$from[1]
which(SFdf$from==ADAL)
which(SFdf$from==ADEL)
which(SFdf$from=='ADEL')
for (n in 1:length(all_nodes)){
rlSFdf=which(SFdf$from==all_nodes[n])
}
for (n in 1:length(all_nodes)){
rlSFdf=which(SFdf$from==all_nodes[5])
}
rlSFdf=which(SFdf$from==all_nodes[5])
rledges=which(edges$from==all_nodes[n])
for (n in 1:length(all_nodes)){
rlSFdf=which(SFdf$from==all_nodes[n])
rledges=which(edges$from==all_nodes[n])
print(n)
for (connf in rlSFdf){
print(connf)
print(connc)
for (connc in rledges){
if (SFdf$from[connf]==edges$from[connc] & SFdf$to[connf]==edges$to[connc]){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
}
for (n in 1:length(all_nodes)){
rlSFdf=which(SFdf$from==all_nodes[n])
rledges=which(edges$from==all_nodes[n])
print(n)
for (connc in rledges){
print(connc)
for (connf in rlSFdf){
if (SFdf$from[connf]==edges$from[connc] & SFdf$to[connf]==edges$to[connc]){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
}
for (n in 1:length(all_nodes)){
rlSFdf=which(SFdf$from==all_nodes[n])
rledges=which(edges$from==all_nodes[n])
print(n)
for (connc in rledges){
print(connc)
for (connf in rlSFdf){
if (SFdf$to[connf]==edges$to[connc]){
SFdf$strucLogW[connf]=edges$logWxSGN[connc]
SFdf$strucW[connf]=edges$WxSGN[connc]
}
}
}
}
SFdf$group.x=NULL
View(SFdf)
SFdf$group.y=NULL
SFdf$strucLogWe=NULL
SFdf$strucWe=NULL
SFdf$connWeightP=NULL
SFdf$connWeightN=NULL
SFdf$logConnWP=NULL
SFdf$logConnWN=NULL
write.csv(SFdf,'SFdf.csv')
### Plot and lets see..
ggplot(SFdf, aes(strucLogW, lWNPnoself))+
geom_point(alpha=0.5)+
geom_smooth(method='lm',formula=y~x)
### Plot and lets see..
ggplot(SFdf, aes( lWNPnoself, strucLogW))+
geom_point(alpha=0.5)+
geom_smooth(method='lm',formula=y~x)
### how are they correlating
cor.test(data=SFdf, connWeight, strucLogW, method=c("pearson", "kendall", "spearman"))
### how are they correlating
cor.test(SFdf$connWeight, SFdf$strucLogW, method=c("pearson", "kendall", "spearman"))
