# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Group', shape='Synapse type')+
scale_color_discrete(labels=c('Sensory','Sensory-Interneuron','Interneuron','Sensory-Motor','Sensory-Motor-Interneuron','Motor-Interneuron','Motor'))+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Plotting ----------
## Create structural adjacency matrix showing communities
ggplot(edges, aes(x = from, y = to, group=Syn, color=group, shape=Syn)) +
geom_point()+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Group', shape='Synapse type')+
scale_color_discrete(labels=c('Sensory','Sensory-Interneuron','Interneuron','Sensory-Motor','Sensory-Motor-Interneuron','Motor-Interneuron','Motor'))+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Plotting ----------
## Create structural adjacency matrix showing communities
ggplot(edges, aes(x = from, y = to, group=Syn, color=group, shape=Syn)) +
geom_point(alpha=0.7, size=0.7)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Group', shape='Synapse type')+
scale_color_discrete(labels=c('Sensory','Sensory-Interneuron','Interneuron','Sensory-Motor','Sensory-Motor-Interneuron','Motor-Interneuron','Motor'))+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Plotting ----------
## Create structural adjacency matrix showing communities
ggplot(edges, aes(x = from, y = to, group=Syn, color=group, shape=Syn)) +
geom_point(alpha=0.7)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Group', shape='Synapse type')+
scale_color_discrete(labels=c('Sensory','Sensory-Interneuron','Interneuron','Sensory-Motor','Sensory-Motor-Interneuron','Motor-Interneuron','Motor'))+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.9)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Connection\nweight', shape='Synapse type')+
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.9, size=0.7)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Connection\nweight', shape='Synapse type')+
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.9, size=0.9)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Connection\nweight', shape='Synapse type')+
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Functional connectivity matrix
ggplot(SFdf, aes(x = from, y = to, color=connPhiPsi)) +
geom_point(shape=15) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.05)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.05)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Functional matrix w/o sefl connections
ggplot(SFdf1, aes(x = from, y = to, color=connPhiPsi)) +
geom_point(shape=15, size=6, alpha=0.8) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1)
## Functional matrix w/o sefl connections logarithmic tranformation
SFdf1$logPhiPsi=log(abs(SFdf1$connPhiPsi))
SFdf1$logPhiPsi[SFdf1$logPhiPsi==-Inf]=0
SFdf1$logPhiPsi[SFdf1$connPhiPsi<0]=SFdf1$logPhiPsi[SFdf1$connPhiPsi<0]*-1
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, alpha=0.5, size=0.5) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Create structural adjacency matrix showing weights
ggplot(edges, aes(x = from, y = to, group=Syn, color=lWxSGN, shape=Syn)) +
geom_point(alpha=0.9, size=0.9)+
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Connection\nweight', shape='Synapse type')+
scale_colour_gradient2(low = 'midnightblue', high = 'indianred' )+
ggtitle('Structural connectivity matrix - Somatic')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, alpha=0.5, size=0.5) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, alpha=0.9, size=0.5) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.7) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.8) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.7) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.6) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.5) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.4) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(SFdf1, aes(x = from, y = to, color=logPhiPsi)) +
geom_point(shape=3, size=0.2) +
geom_hline(yintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
geom_vline(xintercept =c(68.5, 78.5, 145.5, 167.5, 173.5, 196.5), alpha=0.2)+
theme_light() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
labs(colour='Functional\nweight')+
ggtitle('Functional connectivity matrix w/o self conn. - Somatic')+
scale_colour_gradient2(low = 'aquamarine3', high = 'chocolate1')+
theme(
legend.title.align = 0.5,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Analyzing weight correlations between functional and structural networks ----
# Filter for structural existent connections
SFdf2=SFdf1
SFdf2$logsumEC[SFdf2$logsumEC==0]=NA ## filtering structural inexistent
subset=SFdf2$logsumEC
SFdf2=SFdf2[complete.cases(subset), ]
SFdf2$connPhiPsi[SFdf2$connPhiPsi==0]=NA ## filtering functional Null
SFdf2$connPhiPsi[SFdf2$logsumEC>0&SFdf2$connPhiPsi<0]=NA   ## Filtering excitatory true positives
SFdf2$connPhiPsi[SFdf2$logsumEC<0&SFdf2$connPhiPsi>0]=NA   ## Filtering inhibitory true positives
subset=SFdf2$connPhiPsi
SFdf2=SFdf2[complete.cases(subset), ]
rm(subset)
# Pearson correlation test
cor.test(SFdf2$connPhiPsi, SFdf2$logsumEC, method=c("pearson"))
# Plot correlation
ggplot(SFdf2, aes(logsumEC, connPhiPsi))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)+
xlab('Structural Weight')+
ylab('Functional Weight')+
ggtitle('Weight correlation - Somatic')
## Independent analysis for Excitatory synapses
SFdf2Exc=SFdf2
SFdf2Exc$connPhiPsi[SFdf2Exc$connPhiPsi<0]=NA
subset=SFdf2Exc$connPhiPsi
SFdf2Exc=SFdf2Exc[complete.cases(subset), ]
rm(subset)
# Pearson correlation test
cor.test(SFdf2Exc$connPhiPsi, SFdf2Exc$logsumEC, method=c("pearson"))
# Plot correlation
ggplot(SFdf2Exc, aes(logsumEC, connPhiPsi))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)+
xlab('Structural Weight')+
ylab('Functional Weight')+
ggtitle('Weight correlation for excitatory synapses - Somatic')
## Independent analysis for Inhibitory synapses
SFdf2Inh=SFdf2
SFdf2Inh$connPhiPsi[SFdf2Inh$connPhiPsi>0]=NA
subset=SFdf2Inh$connPhiPsi
SFdf2Inh=SFdf2Inh[complete.cases(subset), ]
rm(subset)
# Pearson correlation test
cor.test(SFdf2Inh$connPhiPsi, SFdf2Inh$logsumEC, method=c("pearson"))
# Plot correlation
ggplot(SFdf2Inh, aes(logsumEC, connPhiPsi))+
geom_point(size=0.5)+
geom_smooth(method='lm',formula=y~x, size=0.5)+
xlab('Structural Weight')+
ylab('Functional Weight')+
ggtitle('Weight correlation for excitatory synapses - Somatic')
